import React, { useEffect, useState } from 'react';
import { Card, FormField, Loader } from '../components';

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return (
      data.map((post) => <Card key={post._id} {...post} />)
    );
  }

  return (
    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
  );
};
// 这个组件应该是渲染的文字输入的图片结果.如果有data 就一个一个渲染 如果没有 那就只return 用户输入的{title}

  const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, useSearchText] = useState('')
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);
  
  const fetchPosts = async () => {
    setLoading(true);

    try {
      const response = await fetch('https://localhost:8080/api/v1/post', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    } catch (err) {
      alert(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

 const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
        setSearchedResults(searchResult);
      }, 500),
    );
  };
  return (
    <section className = "max-w-7x1 mx-auto">
      <div>
        <h1 className = "font-extrabold text-[#222328] text-[32px] " >The Community Showcase</h1>
        <p className = "mt-2 text-[#666e75] text-[16px] max-w[500px]">Browse through a collection of imaginative and visually stunning images generated by DALL·E AI</p>
      </div>


      <div className = "mt-16">
        <FormField 
          LabelName = "search Posts"
          type = "text"
          name = "text"
          placeholder = "search Posts"
          value = {searchText}
          handleChange={handleSearchChange}
        />  
      </div>
      <div className = "mt-10">
        {loading ?(
          <div className = "flex justify-center items-center">
            {/* 如果在loading，就render这个div */}
            <Loader />
          </div>
        ) : (
          <>
          {/* 如果有searchText 这个代码就会显示这句话 和下面的内容*/}
            {searchText && 
            (
              <h2 className = "font-medium text-[#666e75] text-xl mb-3">
                Showing results for <span className = 'text-[#222328]'>{searchText}</span>
              </h2>
            )}
            <div className = "grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {/* 规范了不同屏幕下的不同大小 */}
              {searchText ?(
              <RenderCards
                data={searchedResults}
                // 未来会变成array of actual data 现在就是pass一个string
                title = "No search results found"
                // 如果没有data 就会return "No search results found"
                />
                ) : (
                  <RenderCards
                  data = {allPosts}
                  title = "No posts found"
                  />
                )}
                

            </div>
          </>
        )}
      </div>
      
    </section>
  )
}

export default Home